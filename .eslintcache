[{"/home/manav/github/project-backlog/src/index.js":"1","/home/manav/github/project-backlog/src/App.js":"2","/home/manav/github/project-backlog/src/components/LeftDrawerContent.jsx":"3","/home/manav/github/project-backlog/src/components/NewListDialog.jsx":"4","/home/manav/github/project-backlog/src/components/DrawerComponent.jsx":"5","/home/manav/github/project-backlog/src/components/AppContainer.jsx":"6","/home/manav/github/project-backlog/src/components/AddTdodo.jsx":"7","/home/manav/github/project-backlog/src/context/GlobalState.js":"8","/home/manav/github/project-backlog/src/context/AppReducer.js":"9","/home/manav/github/project-backlog/src/components/Todo.jsx":"10","/home/manav/github/project-backlog/src/components/EditTodoDialog.jsx":"11"},{"size":321,"mtime":1610807153643,"results":"12","hashOfConfig":"13"},{"size":1343,"mtime":1610980129294,"results":"14","hashOfConfig":"13"},{"size":3551,"mtime":1610817371142,"results":"15","hashOfConfig":"13"},{"size":2336,"mtime":1610817382754,"results":"16","hashOfConfig":"13"},{"size":3976,"mtime":1611084867592,"results":"17","hashOfConfig":"13"},{"size":3308,"mtime":1610817302906,"results":"18","hashOfConfig":"13"},{"size":3509,"mtime":1610816401096,"results":"19","hashOfConfig":"13"},{"size":4588,"mtime":1610818240300,"results":"20","hashOfConfig":"13"},{"size":4208,"mtime":1611082881373,"results":"21","hashOfConfig":"13"},{"size":3237,"mtime":1610817392774,"results":"22","hashOfConfig":"13"},{"size":3715,"mtime":1610817357098,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fgtd3v",{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"/home/manav/github/project-backlog/src/index.js",[],["49","50"],"/home/manav/github/project-backlog/src/App.js",["51","52","53","54"],"import React, { useContext, useEffect, useState } from 'react';\nimport './App.css';\nimport DrawerComponent from './components/DrawerComponent';\nimport { GlobalProvider, GlobalContext } from './context/GlobalState';\n\n\n\nfunction App() {\n\n  const { initialState, list, setFromLocal } = useContext(GlobalContext);\n\n  console.log(\"--list : \", list);\n\n  useEffect(() => {\n    getFromLocal();\n  }, [])\n\n  const saveToLocal = () => {\n    console.log(\"saveToLocal CALLED\");\n    localStorage.setItem('pBData', JSON.stringify({ initialState }));\n  }\n\n  // useEffect(() => {\n  //   saveToLocal();\n  // }, [list])\n\n  console.log(\"Initial State => \", initialState);\n\n  const getFromLocal = () => {\n    console.log(\"getFromLocal CALLED\");\n    if (localStorage.getItem('pBData') === null) {\n      console.log(\"LOCAL STORAGE NOT FOUND\");\n      localStorage.setItem('pBData', JSON.stringify({\n        initialState: {\n          selectedList: -1,\n          llen: 1,\n          viewNotCompleted: true,\n          list: []\n        }\n      }))\n    } else {\n      console.log(\"LOCAL STORAGE  FOUND\");\n      const pBDataFromLocal = JSON.parse(localStorage.getItem('pBData'));\n      setFromLocal(pBDataFromLocal);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Main\">\n        <DrawerComponent />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/manav/github/project-backlog/src/components/LeftDrawerContent.jsx",[],"/home/manav/github/project-backlog/src/components/NewListDialog.jsx",[],"/home/manav/github/project-backlog/src/components/DrawerComponent.jsx",["55"],"/home/manav/github/project-backlog/src/components/AppContainer.jsx",[],"/home/manav/github/project-backlog/src/components/AddTdodo.jsx",[],"/home/manav/github/project-backlog/src/context/GlobalState.js",[],"/home/manav/github/project-backlog/src/context/AppReducer.js",[],"/home/manav/github/project-backlog/src/components/Todo.jsx",[],"/home/manav/github/project-backlog/src/components/EditTodoDialog.jsx",["56","57"],"import React, { useState, useContext } from 'react';\nimport {\n  FormControl, Snackbar, Dialog, DialogTitle, TextField, ListItemText, Divider, List, ListItem\n} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport { GlobalContext } from '../context/GlobalState';\n\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function EditTodoDialog(props) {\n  const { onClose, open, data } = props;\n  const [snkBarOpen, setSnkBarOpen] = useState(false);\n\n\n  const [title, setTitle] = useState(data.title);\n  const [desc, setDesc] = useState(data.desc);\n  const [pointers, setPointers] = useState(data.pointers);\n  const [ref, setRef] = useState(data.ref);\n\n  const { editTodo, selectedList } = useContext(GlobalContext);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n\n  const handleSnkBarClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnkBarOpen(false);\n  };\n\n\n  return (\n    <>\n      <Dialog\n        fullWidth={true}\n        onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\" style={{ textAlign: 'center' }}>Edit Todo</DialogTitle>\n        <Divider />\n        {/* <Grid container xs={12} spacing={2}>\n\n          <Grid item xs={12} spacing={2}>\n\n          </Grid>\n        </Grid> */}\n        <List style={{ alignItems: 'center', padding: 8 }} >\n          <ListItem >\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined\"\n                label=\"Title\"\n                variant=\"outlined\"\n                defaultValue={title}\n                size=\"small\"\n                onChange={(e) => setTitle(e.target.value)}\n                error={title === '' ? true : false}\n                helperText=\"Must not be Empty\"\n              />\n            </FormControl>\n          </ListItem>\n          <ListItem>\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined\"\n                label=\"Description\"\n                variant=\"outlined\"\n                defaultValue={desc}\n                size=\"small\"\n                onChange={(e) => setDesc(e.target.value)}\n              />\n            </FormControl>\n          </ListItem>\n          <ListItem>\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined\"\n                label=\"Pointers\"\n                variant=\"outlined\"\n                defaultValue={pointers}\n                size=\"small\"\n                onChange={(e) => setPointers(e.target.value)}\n              />\n            </FormControl>\n          </ListItem>\n          <ListItem>\n            <FormControl fullWidth>\n              <TextField\n                id=\"outlined\"\n                label=\"Reference\"\n                variant=\"outlined\"\n                defaultValue={ref}\n                size=\"small\"\n                onChange={(e) => setRef(e.target.value)}\n              />\n            </FormControl>\n          </ListItem>\n          <ListItem style={{ justifyContent: 'flex-end' }}>\n            <List >\n              <ListItem button style={{ textAlign: 'center', color: 'green' }}>\n                <ListItemText primary=\"Save Todo\" />\n              </ListItem>\n            </List>\n          </ListItem>\n        </List>\n      </Dialog>\n\n      {/* Snackbar */}\n      <Snackbar\n        open={snkBarOpen}\n        autoHideDuration={3000}\n        onClose={handleSnkBarClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n      >\n        <Alert onClose={handleClose} severity=\"error\">\n          List Name must not be Empty!\n          </Alert>\n      </Snackbar>\n    </>\n  );\n}",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":1,"column":40,"nodeType":"64","messageId":"65","endLine":1,"endColumn":48},{"ruleId":"62","severity":1,"message":"66","line":4,"column":10,"nodeType":"64","messageId":"65","endLine":4,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":16,"column":6,"nodeType":"69","endLine":16,"endColumn":8,"suggestions":"70"},{"ruleId":"62","severity":1,"message":"71","line":18,"column":9,"nodeType":"64","messageId":"65","endLine":18,"endColumn":20},{"ruleId":"62","severity":1,"message":"72","line":3,"column":64,"nodeType":"64","messageId":"65","endLine":3,"endColumn":68},{"ruleId":"62","severity":1,"message":"73","line":24,"column":11,"nodeType":"64","messageId":"65","endLine":24,"endColumn":19},{"ruleId":"62","severity":1,"message":"74","line":24,"column":21,"nodeType":"64","messageId":"65","endLine":24,"endColumn":33},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'GlobalProvider' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getFromLocal'. Either include it or remove the dependency array.","ArrayExpression",["77"],"'saveToLocal' is assigned a value but never used.","'Icon' is defined but never used.","'editTodo' is assigned a value but never used.","'selectedList' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},"Update the dependencies array to be: [getFromLocal]",{"range":"80","text":"81"},[391,393],"[getFromLocal]"]